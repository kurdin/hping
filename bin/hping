#!/usr/bin/env node

var program = require('commander'),
dns = require('dns'),
request = require('request'),
status_codes = require('../lib/status')
config = require('yaml-config'),
info = 'Sends HTTP HEAD or GET or POST requests to any web or api server.\n',
usage = '[head|get|post] [http(s)://]www.webserver.com[:port] [another host]';

// hping http://www.console.re [or] hping https://www.console.re [or] hping http://www.console.re:443 [or] hping http://www.console.re/ping';

var defaults = {
  confile: './config/hping.yaml',
  interval: 1,
  type: 'HEAD'
}, settings;

program
  .version('0.1')
  .usage(usage)
  .option('-c, --config [./config/hping.yaml]', 'hping config file in YAML format', defaults.confile)
  .option('-i, --interval [1]', 'hping interval in seconds (edit defaults in ./config/default.yml)', defaults.interval)
  .option('-t, --type [head]', 'hping request type [head] | get | post (edit defaults in ./config/default.yml)', defaults.type)

program
  .command('help')
  .description('Show usage information')
  .action(function(msg, options){
    console.log(info);
  });

program
  .command('get')
  .description('Sends HTTP GET requests to web or api server.')
  .action(function(msg, options){
    if (program.args.length > 1) {
      hping_run(program.args, 'GET');
    } else {
      console.log(usage);
    }
});

program
  .command('post')
  .description('Sends HTTP POST requests to web or api server.')
  .action(function(msg, options){
    if (program.args.length > 1) {
      hping_run(program.args, 'POST');
    } else {
      console.log(usage);
    }
});

program
  .command('head')
  .description('Sends HTTP HEAD requests to web or api server.')
  .action(function(msg, options){
    if (program.args.length > 1) {
      hping_run(program.args, 'HEAD');
    } else {
      console.log(usage);
    }
});

program
   .on('*', function(e) {
      hping_run(e); 
});

program.parse(process.argv);

if(program.args.length < 1) { 
  console.log(usage);
};

function hping_run(args, type) {
   var c = (program.config !== defaults.confile)? program.config : defaults.confile;
   settings = config.readConfig(c);
   if (!settings.interval) { 
    console.error('Specified config file: %s could not be used, see error above. Using default config: %s', c, defaults.confile);
    settings = config.readConfig(defaults.confile);
   }
   settings.interval = program.interval;
   settings.type = program.type;
   args.forEach(function (url) {
     if (typeof url == 'string' || url instanceof String) {
      hpinging(url,type);
     }
   });
}

function hpinging(url, type) {
     if(!/^(https?):\/\//i.test(url)) url = 'http://'+url;
     if (!type) type = settings.type || 'HEAD';
     var options = {
        url: url,
        timeout: parseInt(settings.timeout, 10) || 5000,
        method : type,
        headers: {
        'User-Agent': 'hPING [git.io/hping]'
        }
     };
     dns.resolve4(require('url').parse(url).hostname, function (err, ip) {
       if (err) var ip = [''];
       request(options, function (e,r) {
          hping_display(e,r,url,type, ip[0]);
       });
     });
}

function hping_display(err,res,url,type,ip) {
  var hcode = hlength = hserver = herror = hinfo = hip = '';
  var hstatus = up = '[UP]';
  var down = '[DOWN]';
  var hping = 'hPING: (' + type + ') '  + url;

  if (ip && url.indexOf(ip) == -1) hip = ' (' + ip + ')';
  if (err && err.code) {
    hstatus = down;
    hcode = ' error=' + err.code.toLowerCase();
    switch(err.code) {
    case 'ETIMEDOUT':
        hinfo = " info=connection_timeout";
        break;
    case 'ENOTFOUND':
        hinfo = " info=server_not_found";
        break;
    case 'ECONNREFUSED':
        hinfo = " info=connection_refused";
        break;
    }
  } else if (res && res.headers) {
    if (res.statusCode >= 500) hstatus = down;
    if (status_codes[res.statusCode]) hinfo = " info=" + status_codes[res.statusCode].replace(/\s+/g, '_');
    hcode = ' code=' + res.statusCode;
    if (res.headers['content-length'] && res.headers['content-length'] > 0) hlength = ' content-length=' + res.headers['content-length'];
    if (res.headers['server']) hserver = ' server=' + res.headers['server'];
  } else {
    hstatus = 'unknown_error';
  }
  console.log(hping + hip + hserver + hlength + hcode + hinfo + ' status=' + hstatus);
}

